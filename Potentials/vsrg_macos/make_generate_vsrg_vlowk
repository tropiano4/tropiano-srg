SHELL=/bin/sh
#
# file: make_generate_vsrg_vlowk
# last revised: 22-Mar-2019 generalize to any potential for Tropiano SRG work
# contact:  Dick Furnstahl furnstahl.1@osu.edu and/or A.J. Tropiano tropiano.4@osu.edu
#
# generate_vsrg_vlowk.x generates smooth or sharp cutoff vlowk potentials
#  or an SRG potential with the starting potential, cutoff, type of
#  regulator, and gaussian mesh specified by the user, and outputs them to
#  files.   It also serves as an example for directly calling the
#  vlowk/vsrg subroutines from fortran codes (examples for calling the
#  subroutines from C++ are also available).
# 
# 
# To modify this makefile for another code, you should only need to
#  change the entries in the next section and (possibly the compiler
#  and options).

###########################################################################
# Specification of files
########################################################################### 

# The name of this makefile
MAKEFILE= make_generate_vsrg_vlowk

# The command you type to run the program (executable name)
COMMAND=  generate_vsrg_vlowk.x 
# Tarfile name is generated automagically (no need to change this line)
TARFILE= $(addsuffix .tarz, $(basename $(COMMAND)))

# Sub-directories (relative to the current directory)
MODIR=	./modules
VSRGDIR=	./src
INDIR=  ./input
OUTDIR= ./output
README= README_generate_vsrg_vlowk
  
# Here are the Fortran files to be compiled, with the vlowk code
#  combined in the VSRGDIR subdirectory 
#  If you get a "missing separator" error pointed to a line here, 
#  make sure that each \ has NO spaces following it.
SRCS= \
  $(VSRGDIR)/nrtype.f90 $(VSRGDIR)/f2kcli_ifort.f90 \
  $(VSRGDIR)/rksuite.f $(VSRGDIR)/ode_shampine_and_gordon.f \
  $(VSRGDIR)/interpolation.f \
  $(VSRGDIR)/chiraln3lo.f90  $(VSRGDIR)/ichiral.f90 \
  $(VSRGDIR)/smschiral_RS.f90 \
  $(VSRGDIR)/n3lo.f $(VSRGDIR)/n3lo600.f $(VSRGDIR)/n3low.f \
  $(VSRGDIR)/lo450.f $(VSRGDIR)/lo500.f $(VSRGDIR)/lo550.f \
  $(VSRGDIR)/nlo450.f $(VSRGDIR)/nlo500.f $(VSRGDIR)/nlo550.f \
  $(VSRGDIR)/n2lo450.f $(VSRGDIR)/n2lo500.f $(VSRGDIR)/n2lo550.f \
  $(VSRGDIR)/n3lo450new.f $(VSRGDIR)/n3lo500new.f $(VSRGDIR)/n3lo550new.f \
  $(VSRGDIR)/n4lo450.f $(VSRGDIR)/n4lo500.f $(VSRGDIR)/n4lo550.f \
  $(VSRGDIR)/allvnnmodels_r8.f \
  $(VSRGDIR)/vlowkperipherals.f90 \
  $(VSRGDIR)/hermitization.f90 $(VSRGDIR)/v_srg.f90 \
  $(VSRGDIR)/vlowk_sharp_cutoff.f90 $(VSRGDIR)/vlowk_smooth_cutoff.f90 \
  $(VSRGDIR)/vlowkmodule.f90 \
  $(VSRGDIR)/phaseshift.f $(VSRGDIR)/input_file.f90 \
  $(VSRGDIR)/myinterpolation.f90 $(VSRGDIR)/convergence.f90 \
  $(VSRGDIR)/generate_vsrg_vlowk.f90

# Every entry here matches one in SRCS, but with a ".o" ending 
#  Uncomment one of the OBJS= lines according to your preference
#  Put the .o files in the same directory as the corresponding source file
OBJS= $(addsuffix .o, $(basename $(SRCS)))

# Batch run files
RUNFILE = run_generate_vsrg_vlowk.pl 

###########################################################################
# Commands and options for different compilers
########################################################################### 

# Compilation has been tested with the Intel ifort compiler on intel and 
#  amd opteron systems, and for the Portland pgf90 compiler on opteron
#  systems.
# Adjust the paths to libraries to fit your local configuration.

# Uncomment just one of the compiler choices
#COMPILER= INTEL
#COMPILER= PGI
#COMPILER= ABSOFT
COMPILER= GNU

# Uncomment one of the architecture choices (32-bit Intel, 64-bit Intel,
#  64-bit Amd (e.g., opteron)
#ARCH = INTEL32
ARCH = INTEL64
#ARCH = AMD64
#ARCH = MACOSX64
#ARCH = MACOSX32
 
#
# Compiler parameters
#
# F90		Name of the fortran compiler to use 
# FFLAGS	Flags to the fortran 77 compiler
# F90FLAGS      Flages to the fortran 90 compiler 
# LDFLAGS	Flags to the loader
# LIBS		A list of libraries 
#

# Gnu compiler options
ifeq ($(COMPILER),GNU)
  F90= gfortran
  FFLAGS=   -J $(MODIR) -I $(MODIR) -O3  -freal-4-real-8 -ffixed-line-length-132 -fno-automatic 
  F90FLAGS= -J $(MODIR) -I $(MODIR) -O3 

  ifeq ($(ARCH),INTEL64)
    LDFLAGS = -L/usr/local/opt/lapack/lib
#    LDFLAGS =
    LIBS=     -llapack -lblas
  endif
endif

# Intel compiler options
ifeq ($(COMPILER),INTEL)
  F90= ifort
  FFLAGS=   -module $(MODIR) -I $(MODIR) -O3 -i_dynamic -r8 -extend_source -W0 -save 
  F90FLAGS= -module $(MODIR) -I $(MODIR) -O3 -I/usr/local/compiler80/includes  

  ifeq ($(ARCH),INTEL32)
    LDFLAGS	= -i_dynamic -L/usr/local/intel_mkl/mkl721/lib/32 -L/usr/local/intel_fc_80/lib -L/usr/local/intel_cc_80/lib  $(CLIBS)
#    LDFLAGS  = -L/usr/local/intel/mkl61/lib/32  
    LIBS=     -lmkl_lapack64 -lmkl -lguide -lpthread -lifcore -lifport
  endif

  ifeq ($(ARCH),INTEL64)
    LDFLAGS	= -i_dynamic -L/usr/local/intel_mkl/mkl721/lib/32 -L/usr/local/intel_fc_80/lib -L/usr/local/intel_cc_80/lib  $(CLIBS)
    LDFLAGS  = -L/usr/local/intel/mkl61/lib/32  
    LIBS=     -lmkl_lapack64 -lmkl -lguide -lpthread -lifcore -lifport
  endif

  ifeq ($(ARCH),AMD64)
    LDFLAGS=  -lguide -lpthread 
    LIBS=     -llapack -lgoto
  endif
endif

# Portland compiler options
ifeq ($(COMPILER),PGI)
  F90=      pgf90

  ifeq ($(ARCH),AMD64)
    FFLAGS=   -fastsse -tp k8-32 -Mextend -Mr8 -module $(MODIR) -I $(MODIR)
    F90FLAGS= -fastsse -tp k8-32 -module $(MODIR) -I $(MODIR) 
    LDFLAGS=  -tp k8-32 
    LIBS=	    -llapack -lblas
  endif
  
  ifeq ($(ARCH),AMD64)
    FFLAGS=   -fastsse -tp k8-32 -Mextend -Mr8 -module $(MODIR) -I $(MODIR)
    F90FLAGS= -fastsse -tp k8-32 -module $(MODIR) -I $(MODIR) 
    LDFLAGS=  -tp k8-32 
    LIBS=	    -llapack -lblas
  endif
endif

# Absoft compiler options
ifeq ($(COMPILER),ABSOFT)
  F90=      f95

  ifeq ($(ARCH),MACOSX64)
    FFLAGS=    -m64 -W132  -N113 -module $(MODIR) -I $(MODIR)
    F90FLAGS=  -module $(MODIR) -I $(MODIR) 
    LDFLAGS=  
    LIBS=	    -llapack -lblas
  endif

  ifeq ($(ARCH),MACOSX32)
    FFLAGS=   -W132 -N113 -module $(MODIR) -I $(MODIR)
    F90FLAGS= -module $(MODIR) -I $(MODIR) 
    LDFLAGS=   
    LIBS=	    -llapack -lblas
  endif

endif

###########################################################################
# Instructions to compile and link
########################################################################### 
all:	$(COMMAND) 

.SUFFIXES:
.SUFFIXES: .o .mod .f90 .f .cpp

#%.o:	%.mod 

# This is the command to link all of the object files together 
$(COMMAND): $(OBJS) $(MAKEFILE) 
	$(F90) -o $(COMMAND) $(OBJS) $(LDFLAGS) $(LIBS)
 
.f90.mod:
	$(F90) -c $(F90FLAGS) -o $@ $< 
 
.f90.o:	
	$(F90) -c $(F90FLAGS) -o $@ $<
 
.f.o:	
	$(F90) -c $(FFLAGS) -o $@ $<
      
##########################################################################
# Additional tasks 
##########################################################################
      
# Delete the program and the object files (and any module files)
#  Usage:  make -f make_generate_vsrg clean
clean:
	/bin/rm -f $(COMMAND) $(OBJS)
	/bin/rm -f $(MODIR)/*.mod
 
# Pack up the code in a compressed gnu tar file (including symlinks)
#  Usage:  make -f make_generate_vsrg tarz
tarz:
	tar cfhvz $(TARFILE) $(MAKEFILE) $(SRCS) $(RUNFILE) $(MODIR) \
                  $(INDIR) $(OUTDIR) $(README) 
 
##########################################################################
# End of makefile 
##########################################################################
